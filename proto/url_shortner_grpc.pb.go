// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/url_shortner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcHandlerClient is the client API for GrpcHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcHandlerClient interface {
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponse, error)
}

type grpcHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcHandlerClient(cc grpc.ClientConnInterface) GrpcHandlerClient {
	return &grpcHandlerClient{cc}
}

func (c *grpcHandlerClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.GrpcHandler/CreateShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcHandlerClient) GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponse, error) {
	out := new(GetFullURLResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.GrpcHandler/GetFullURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcHandlerServer is the server API for GrpcHandler service.
// All implementations must embed UnimplementedGrpcHandlerServer
// for forward compatibility
type GrpcHandlerServer interface {
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponse, error)
	mustEmbedUnimplementedGrpcHandlerServer()
}

// UnimplementedGrpcHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcHandlerServer struct {
}

func (UnimplementedGrpcHandlerServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedGrpcHandlerServer) GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullURL not implemented")
}
func (UnimplementedGrpcHandlerServer) mustEmbedUnimplementedGrpcHandlerServer() {}

// UnsafeGrpcHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcHandlerServer will
// result in compilation errors.
type UnsafeGrpcHandlerServer interface {
	mustEmbedUnimplementedGrpcHandlerServer()
}

func RegisterGrpcHandlerServer(s grpc.ServiceRegistrar, srv GrpcHandlerServer) {
	s.RegisterService(&GrpcHandler_ServiceDesc, srv)
}

func _GrpcHandler_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcHandlerServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.GrpcHandler/CreateShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcHandlerServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcHandler_GetFullURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcHandlerServer).GetFullURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.GrpcHandler/GetFullURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcHandlerServer).GetFullURL(ctx, req.(*GetFullURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcHandler_ServiceDesc is the grpc.ServiceDesc for GrpcHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shortener.GrpcHandler",
	HandlerType: (*GrpcHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _GrpcHandler_CreateShortURL_Handler,
		},
		{
			MethodName: "GetFullURL",
			Handler:    _GrpcHandler_GetFullURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url_shortner.proto",
}
